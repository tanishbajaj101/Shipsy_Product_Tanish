openapi: 3.0.3
info:
  title: Product API
  version: 1.0.0
  description: |
    REST API for user auth, product management, and shopping cart.
servers:
  - url: /api
paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation or conflict error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      summary: Login and obtain JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/cart:
    get:
      summary: Get current user's cart items
      description: Returns the cart belonging to the authenticated user. No userId parameter is required; the JWT determines the user.
      security:
        - bearerAuth: []
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: List of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/cart/{productId}:
    post:
      summary: Add a product to cart (increments quantity)
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '201':
          description: Updated cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove one unit of a product from cart
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Updated cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      summary: List products
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [Electronics, Clothing, Books, Home Goods]
        - name: couponCodeAvailable
          in: query
          schema:
            type: boolean
        - name: sortBy
          in: query
          schema:
            type: string
            description: Implementation-defined sort key
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '201':
          description: Created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/my-products:
    get:
      summary: List products created by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    put:
      summary: Update a product by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Deletion confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
    RegisterRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        username:
          type: string
        products_created:
          type: array
          items:
            type: string
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [Electronics, Clothing, Books, Home Goods]
        price:
          type: number
        couponCodeAvailable:
          type: boolean
        quantity:
          type: integer
          minimum: 1
        owner_id:
          type: string
        created_at:
          type: string
          format: date-time
    ProductCreateRequest:
      type: object
      required: [name, description, type, price, quantity]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
          maxLength: 5000
        type:
          type: string
          enum: [Electronics, Clothing, Books, Home Goods]
        price:
          type: number
          minimum: 1
        couponCodeAvailable:
          type: boolean
          default: false
        quantity:
          type: integer
          minimum: 1
    ProductUpdateRequest:
      type: object
      description: Partial product update; any subset of fields may be sent
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [Electronics, Clothing, Books, Home Goods]
        price:
          type: number
        couponCodeAvailable:
          type: boolean
        quantity:
          type: integer
          minimum: 1
    CartItem:
      type: object
      description: Cart item from the authenticated user's cart. Each user has at most one cart (scoped by JWT), and items include populated product details for client consumption.
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
security:
  - bearerAuth: []

